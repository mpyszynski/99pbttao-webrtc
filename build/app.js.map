{"version":3,"sources":["../src/app.js"],"names":["express","require","http","app","server","createServer","socket","io","rooms","on","roomID","push","id","otherUser","find","emit","to","payload","target","incoming","candidate","module","exports"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,MAAMH,SAAZ;AACA,IAAMI,SAASF,KAAKG,YAAL,CAAkBF,GAAlB,CAAf;AACA,IAAMG,SAASL,QAAQ,WAAR,CAAf;AACA,IAAMM,KAAKD,OAAOF,MAAP,CAAX;;AAEA,IAAMI,QAAQ,EAAd;;AAEA;AACAD,GAAGE,EAAH,CAAM,YAAN,EAAoB,kBAAU;AAC5B;AACAH,SAAOG,EAAP,CAAU,WAAV,EAAuB,kBAAU;AAC/B;AACA,QAAID,MAAME,MAAN,CAAJ,EAAmB;AACjBF,YAAME,MAAN,EAAcC,IAAd,CAAmBL,OAAOM,EAA1B;AACD,KAFD,MAEO;AACL;AACAJ,YAAME,MAAN,IAAgB,CAACJ,OAAOM,EAAR,CAAhB;AACD;;AAED;AACA,QAAMC,YAAYL,MAAME,MAAN,EAAcI,IAAd,CAAmB;AAAA,aAAMF,OAAON,OAAOM,EAApB;AAAA,KAAnB,CAAlB;AACA;AACA,QAAKC,SAAL,EAAgB;AACdP,aAAOS,IAAP,CAAY,YAAZ,EAA0BF,SAA1B;AACAP,aAAOU,EAAP,CAAUH,SAAV,EAAqBE,IAArB,CAA0B,aAA1B,EAAyCT,OAAOM,EAAhD;AACD;AACF,GAhBD;;AAkBA;AACAN,SAAOG,EAAP,CAAU,OAAV,EAAmB,mBAAW;AAC5B;AACA;AACAF,OAAGS,EAAH,CAAMC,QAAQC,MAAd,EAAsBH,IAAtB,CAA2B,OAA3B,EAAoCE,OAApC;AACD,GAJD;AAKA;AACAX,SAAOG,EAAP,CAAU,QAAV,EAAoB,mBAAW;AAC7B;AACAF,OAAGS,EAAH,CAAMC,QAAQC,MAAd,EAAsBH,IAAtB,CAA2B,QAA3B,EAAqCE,OAArC;AACD,GAHD;AAIA;AACA;AACAX,SAAOG,EAAP,CAAU,eAAV,EAA2B,oBAAY;AACrCF,OAAGS,EAAH,CAAMG,SAASD,MAAf,EAAuBH,IAAvB,CAA4B,eAA5B,EAA6CI,SAASC,SAAtD;AACH,GAFC;AAGD,CApCD;;AAuCAC,OAAOC,OAAP,GAAiB,EAAEnB,QAAF,EAAOC,cAAP,EAAjB","file":"app.js","sourcesContent":["const express = require('express');\nconst http = require('http');\nconst app = express();\nconst server = http.createServer(app);\nconst socket = require('socket.io');\nconst io = socket(server);\n\nconst rooms = {};\n\n// On server connection, new socket object\nio.on(\"connection\", socket => {\n  // Attach event listener \"join room\", pull roomID off url\n  socket.on(\"join room\", roomID => {\n    // Server checks if room is in the room collection, and pushes the id into the same array\n    if (rooms[roomID]) {\n      rooms[roomID].push(socket.id);\n    } else {\n      // If it doesnt exist, the id is put into a new room array in the rooms object\n      rooms[roomID] = [socket.id];\n    }\n\n    // Is there somebody in the room? See if  there is an id in that array that is not ours\n    const otherUser = rooms[roomID].find(id => id !== socket.id);\n    // Let ourselves know that there is a user in the room, and the other user that we are joining\n    if  (otherUser) {\n      socket.emit(\"other user\", otherUser);\n      socket.to(otherUser).emit(\"user joined\", socket.id)\n    }\n  });\n\n  // When the offer event is fired, it accepts the payload as an argument\n  socket.on(\"offer\", payload => {\n    // Send an event to payload.target (the person you are calling)\n    // Emit the offer event, and the information with who you are, and the offer you are sending to the other user\n    io.to(payload.target).emit(\"offer\", payload)\n  });\n  // Listen on answer, get the payload object\n  socket.on(\"answer\", payload => {\n    // Emits an answer with the payload to the calling peer\n    io.to(payload.target).emit(\"answer\", payload )\n  });\n  // Ice-candidate is a way for 2 peers to agree upon a connection\n  // Used by both peers when peer 1 or 2 come up with a candidate, until they find one that works\n  socket.on(\"ice-candidate\", incoming => {\n    io.to(incoming.target).emit(\"ice-candidate\", incoming.candidate);\n});\n});\n\n\nmodule.exports = { app, server };\n"]}