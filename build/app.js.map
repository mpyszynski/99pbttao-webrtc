{"version":3,"sources":["../src/app.js"],"names":["express","require","connectDB","mongoose","http","app","server","createServer","socket","io","cookieParser","path","GoogleStrategy","Strategy","passport","session","MongoStore","cors","config","rooms","use","json","static","join","__dirname","origin","credentials","secret","resave","saveUninitialized","store","mongooseConnection","connection","initialize","on","roomID","push","id","otherUser","find","emit","to","payload","target","incoming","candidate","get","req","res","sendFile","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["const express = require('express');\nconst connectDB = require('../config/db.js');\nconst mongoose = require('mongoose');\nconst http = require('http');\nconst app = express();\nconst server = http.createServer(app);\nconst socket = require('socket.io');\nconst io = socket(server);\nconst cookieParser = require('cookie-parser');\nconst path = require('path');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\nconst passport = require('passport');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\nconst cors = require('cors');\n\nrequire('dotenv').config({\n  path: './config/config.env'\n})\nrequire('../config/passport')(passport);\n\nconnectDB();\n\nconst rooms = {};\n\napp.use(cookieParser());\napp.use(express.json());\napp.use(express.static(path.join(__dirname, '../client/build')));\napp.use(cors({\n  origin: 'http://localhost:3000',\n  credentials: true\n}))\n\n// Sessions\napp.use(\n  session({\n    secret: 'keyboard puppy',\n    resave: false,\n    saveUninitialized: false,\n    store: new MongoStore({ mongooseConnection: mongoose.connection }),\n  })\n);\n\n// Passport middleware\napp.use(passport.initialize())\napp.use(passport.session())\n\napp.use('/auth', require('../routes/auth'));\n// On server connection, new socket object\nio.on(\"connection\", socket => {\n  // Attach event listener \"join room\", pull roomID off url\n  socket.on(\"join room\", roomID => {\n    // Server checks if room is in the room collection, and pushes the id into the same array\n    if (rooms[roomID]) {\n      rooms[roomID].push(socket.id);\n    } else {\n      // If it doesnt exist, the id is put into a new room array in the rooms object\n      rooms[roomID] = [socket.id];\n    }\n\n    // Is there somebody in the room? See if there is an id in that array that is not ours\n    const otherUser = rooms[roomID].find(id => id !== socket.id);\n    // Let ourselves know that there is a user in the room, and the other user that we are joining\n    if  (otherUser) {\n      socket.emit(\"other user\", otherUser);\n      socket.to(otherUser).emit(\"user joined\", socket.id)\n    }\n  });\n\n  // When the offer event is fired, it accepts the payload as an argument\n  socket.on(\"offer\", payload => {\n    // Send an event to payload.target (the person you are calling)\n    // Emit the offer event, and the information with who you are, and the offer you are sending to the other user\n    io.to(payload.target).emit(\"offer\", payload)\n  });\n  // Listen on answer, get the payload object\n  socket.on(\"answer\", payload => {\n    // Emits an answer with the payload to the calling peer\n    io.to(payload.target).emit(\"answer\", payload )\n  });\n  // Ice-candidate is a way for 2 peers to agree upon a connection\n  // Used by both peers when peer 1 or 2 come up with a candidate, until they find one that works\n  socket.on(\"ice-candidate\", incoming => {\n    io.to(incoming.target).emit(\"ice-candidate\", incoming.candidate);\n});\n});\n\n\napp.get('*', (req,res) =>{\n  res.sendFile(path.join(__dirname, '../client/build/index.html'));\n});\n\n\nmodule.exports = { app, server };\n"]}